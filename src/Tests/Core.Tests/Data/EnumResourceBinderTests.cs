#region copyright

// Copyright 2013-2016 Alphacloud.Net
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

#endregion

// ReSharper disable ExceptionNotDocumented
// ReSharper disable HeapView.ClosureAllocation
// ReSharper disable ExceptionNotDocumentedOptional
// ReSharper disable HeapView.DelegateAllocation
// ReSharper disable HeapView.ObjectAllocation
// ReSharper disable HeapView.ObjectAllocation.Evident
// ReSharper disable HeapView.BoxingAllocation
namespace Core.Tests.Data
{
    using System.Linq;
    using System.Resources;
    using Alphacloud.Common.Core.Resources;
    using FluentAssertions;
    using JetBrains.Annotations;
    using Moq;
    using NUnit.Framework;

    [TestFixture]
    class EnumResourceBinderTests
    {
        Mock<ResourceManager> _resourceMgr;


        [Test]
        public void GetResourceKey_KeyIsSpecifiedInAttribute_UseCustomKey()
        {
            var fieldInfo = typeof (TestEnum).GetField("CustomKey");
            if (fieldInfo == null)
                Assert.Fail("Field not found");

            EnumResourceBinder.GetResourceKey(fieldInfo, new ResourceBindingAttribute {Key = "Custom"})
                .Should().Be("Custom");
        }


        [Test]
        public void GetResourceKey_NoKeySpecified_ShouldGenerateKeyFromEnumAndFieldName()
        {
            var field = typeof (TestEnum).GetField("AutoGeneratedKey");
            if (field == null)
                Assert.Fail("Field not found");

            EnumResourceBinder.GetResourceKey(field, new ResourceBindingAttribute()).Should().Be(
                "TestEnum_AutoGeneratedKey");
        }


        [Test]
        public void GetText()
        {
            _resourceMgr.Setup(rm => rm.GetString("resource")).Returns("Custom");
            EnumResourceBinder.GetString(_resourceMgr.Object, TestEnum.CustomKey).Should().Be("Custom");
        }


        [Test]
        public void SelectListFor_MissingResourceKey_ShouldUseMemberName()
        {
            var r = EnumResourceBinder.SelectionListFor<TestEnum>(_resourceMgr.Object);
            r.First(p => p.Value == "AutoGeneratedKey").Text.Should().Be("Auto-generated");
        }


        [Test]
        public void ShouldMapUsingFieldNameKeyType()
        {
            var r = EnumResourceBinder.LoadStrings<TestEnum>(_resourceMgr.Object, KeyGenerationStategy.FieldName);
            r.Count.Should().Be(2);
            r.Keys.Should().Contain("AutoGeneratedKey").And.Contain("CustomKey");
        }


        [Test]
        public void ShouldMapUsingNumberKeyType()
        {
            var r = EnumResourceBinder.LoadStrings<TestEnum>(_resourceMgr.Object, KeyGenerationStategy.NumericValue);
            r.Count.Should().Be(2);
            r.Keys.Should().Contain("1").And.Contain("2");
        }

        #region Nested type: TestEnum

        [UsedImplicitly(ImplicitUseTargetFlags.WithMembers)]
        enum TestEnum : byte
        {
            NonDecoratedField = 0,

            [ResourceBinding] AutoGeneratedKey = 1,

            [ResourceBinding(Key = "resource")] CustomKey = 2
        }

        #endregion

        #region Setup/Teardown

        [SetUp]
        public void SetUp()
        {
            _resourceMgr = new Mock<ResourceManager>();
            _resourceMgr.Setup(rm => rm.GetString("TestEnum_AutoGeneratedKey")).Returns("Auto-generated");
            _resourceMgr.Setup(rm => rm.GetString("resource")).Returns("custom");
        }


        [TearDown]
        public void TearDown()
        {
            _resourceMgr.Verify();
        }

        #endregion
    }
}